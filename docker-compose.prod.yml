# Production Docker Compose Configuration
# Egyptian Price Comparison App - Waffar Shokran
version: '3.8'

services:
  # Redis - Production configuration with persistence
  redis:
    image: redis:7-alpine
    container_name: waffar_redis_prod
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./config/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      - TZ=Africa/Cairo
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Backend - Production FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: waffar_backend_prod
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - TZ=Africa/Cairo
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - LOG_LEVEL=WARNING
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=50
      - TIMEOUT=30
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Frontend - Nginx serving static files
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: waffar_frontend_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/ssl/certs:ro
    environment:
      - TZ=Africa/Cairo
      - API_URL=http://backend:8000
    depends_on:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Monitoring - Optional Redis monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: waffar_redis_exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - TZ=Africa/Cairo
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - monitoring

  # Log aggregation - Optional
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: waffar_logs
    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - /var/log:/var/log:ro
    environment:
      - TZ=Africa/Cairo
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: waffar_prod_network